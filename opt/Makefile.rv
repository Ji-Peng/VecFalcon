# Makefile for SpacemiT X60

CC = gcc
LD = gcc
# PG = -pg
# We work on the SHAKE256X4 variant
X4 = -DFNDSA_SHAKE256X4=1
LDFLAGS = $(PG)
LIBS =
LIBS_GPERF = -Wl,-rpath -Wl,/usr/local/lib -lprofiler
# -MT $@: Set the target name in the dependency file to the current rule's target ($@).
# -MMD: Generate a dependency file, excluding system headers.
# -MP: Add empty phony targets for each dependency to prevent errors if headers are missing.
# -MF out/$*.d: Output the dependency file to the specified path (out/$*.d).
DEPFLAGS = -MT $@ -MMD -MP -MF out/$*.d

CFLAGS_COMMON = -W -Wextra -Wundef -Wshadow -O2 -g $(PG) $(X4) \
	-DWARMUP_N=500 -DTESTS_N=2000
CFLAGS_RV64GC	 = $(CFLAGS_COMMON) -mabi=lp64d -march=rv64gc	\
	-DFNDSA_RV64D=1 -DRV64=1 -DRVV_VLEN256=0
CFLAGS_RV64GCV	 = $(CFLAGS_COMMON) -mabi=lp64d -march=rv64gcv	\
	-DFNDSA_RV64D=1 -DRV64=1 -DRVV_VLEN256=1
CFLAGS_RV64GCB	 = $(CFLAGS_COMMON) -mabi=lp64d -march=rv64gc_zba_zbb 	\
	-DFNDSA_RV64D=1 -DRV64=1 -DRVV_VLEN256=0
CFLAGS_RV64GCVB	 = $(CFLAGS_COMMON) -mabi=lp64d -march=rv64gcv_zba_zbb	\
	-DFNDSA_RV64D=1 -DRV64=1 -DRVV_VLEN256=1
	
SRCS_COMM = codec.c mq.c sha3.c sysrng.c util.c
SRCS_KGEN = kgen.c kgen_fxp.c kgen_gauss.c kgen_mp31.c kgen_ntru.c kgen_poly.c kgen_zint31.c
SRCS_SIGN = sign.c sign_core.c sign_fpoly.c sign_fpr.c sign_sampler.c
SRCS_VRFY = vrfy.c
SRCS = $(SRCS_COMM) $(SRCS_KGEN) $(SRCS_SIGN) $(SRCS_VRFY)
SRCS_TEST = test_fndsa.c
SRCS_SPEED = speed_fndsa.c
SRCS_GPERF = test_gperf.c

ASMS_RV64IM 	= fips202_rv64im.S  gaussian0_rv64.S
ASMS_RV64IMB	= fips202_rv64imb.S gaussian0_rv64.S
ASMS_RVV		= fft_rvv.S

OBJS_RV64GC 		= $(addprefix out/, $(SRCS:.c=_rv64gc.o))	\
	$(addprefix out/, $(ASMS_RV64IM:.S=_rv64gc.o))
OBJS_RV64GCV 		= $(addprefix out/, $(SRCS:.c=_rv64gcv.o))	\
	$(addprefix out/, $(ASMS_RV64IM:.S=_rv64gcv.o))				\
	$(addprefix out/, $(ASMS_RVV:.S=_rv64gcv.o))
OBJS_RV64GCB 		= $(addprefix out/, $(SRCS:.c=_rv64gcb.o))	\
	$(addprefix out/, $(ASMS_RV64IMB:.S=_rv64gcb.o))
OBJS_RV64GCVB 		= $(addprefix out/, $(SRCS:.c=_rv64gcvb.o))	\
	$(addprefix out/, $(ASMS_RV64IMB:.S=_rv64gcvb.o))			\
	$(addprefix out/, $(ASMS_RVV:.S=_rv64gcvb.o))

OBJS_TEST_RV64GC 	= $(addprefix out/, $(SRCS_TEST:.c=_rv64gc.o))
OBJS_TEST_RV64GCV 	= $(addprefix out/, $(SRCS_TEST:.c=_rv64gcv.o))
OBJS_TEST_RV64GCB 	= $(addprefix out/, $(SRCS_TEST:.c=_rv64gcb.o))
OBJS_TEST_RV64GCVB 	= $(addprefix out/, $(SRCS_TEST:.c=_rv64gcvb.o))

OBJS_SPEED_RV64GC 	= $(addprefix out/, $(SRCS_SPEED:.c=_rv64gc.o))
OBJS_SPEED_RV64GCV 	= $(addprefix out/, $(SRCS_SPEED:.c=_rv64gcv.o))
OBJS_SPEED_RV64GCB 	= $(addprefix out/, $(SRCS_SPEED:.c=_rv64gcb.o))
OBJS_SPEED_RV64GCVB = $(addprefix out/, $(SRCS_SPEED:.c=_rv64gcvb.o))
# for gperftools
OBJS_GPERF_RV64GCVB	= $(addprefix out/, $(SRCS_GPERF:.c=_rv64gcvb.o))

all: \
	out/test_fndsa_rv64gc 		out/speed_fndsa_rv64gc		\
	out/test_fndsa_rv64gcv 		out/speed_fndsa_rv64gcv		\
	out/test_fndsa_rv64gcb 		out/speed_fndsa_rv64gcb		\
	out/test_fndsa_rv64gcvb 	out/speed_fndsa_rv64gcvb

# out/test_gperf_rv64gcvb

run_speed: \
	out/speed_fndsa_rv64gc 	out/speed_fndsa_rv64gcv		\
	out/speed_fndsa_rv64gcb	out/speed_fndsa_rv64gcvb
	echo "We work on the SHAKE256X4 variant.\n" > speed_fndsa_x60.txt
	echo "FN-DSA on RV64GC" >>speed_fndsa_x60.txt
	perf stat ./out/speed_fndsa_rv64gc  >>speed_fndsa_x60.txt  2>/dev/null
	echo "FN-DSA on RV64GCV" >>speed_fndsa_x60.txt
	perf stat ./out/speed_fndsa_rv64gcv  >>speed_fndsa_x60.txt  2>/dev/null
	echo "FN-DSA on RV64GCB" >>speed_fndsa_x60.txt
	perf stat ./out/speed_fndsa_rv64gcb  >>speed_fndsa_x60.txt  2>/dev/null
	echo "FN-DSA on RV64GCVB" >>speed_fndsa_x60.txt
	perf stat ./out/speed_fndsa_rv64gcvb >>speed_fndsa_x60.txt 2>/dev/null

clean:
	-rm -rf out/

out:
	@mkdir -p out

out/test_fndsa_rv64gc: $(OBJS_RV64GC) $(OBJS_TEST_RV64GC)| out
	$(LD) $(LDFLAGS) $(LIBS) $^ -o $@

out/speed_fndsa_rv64gc: $(OBJS_RV64GC) $(OBJS_SPEED_RV64GC)| out
	$(LD) $(LDFLAGS) $(LIBS) $^ -o $@

out/test_fndsa_rv64gcv: $(OBJS_RV64GCV) $(OBJS_TEST_RV64GCV)| out
	$(LD) $(LDFLAGS) $(LIBS) $^ -o $@

out/speed_fndsa_rv64gcv: $(OBJS_RV64GCV) $(OBJS_SPEED_RV64GCV)| out
	$(LD) $(LDFLAGS) $(LIBS) $^ -o $@

out/test_fndsa_rv64gcb: $(OBJS_RV64GCB) $(OBJS_TEST_RV64GCB)| out
	$(LD) $(LDFLAGS) $(LIBS) $^ -o $@

out/speed_fndsa_rv64gcb: $(OBJS_RV64GCB) $(OBJS_SPEED_RV64GCB)| out
	$(LD) $(LDFLAGS) $(LIBS) $^ -o $@

out/test_fndsa_rv64gcvb: $(OBJS_RV64GCVB) $(OBJS_TEST_RV64GCVB)| out
	$(LD) $(LDFLAGS) $(LIBS) $^ -o $@

out/speed_fndsa_rv64gcvb: $(OBJS_RV64GCVB) $(OBJS_SPEED_RV64GCVB)| out
	$(LD) $(LDFLAGS) $(LIBS) $^ -o $@

# out/test_gperf_rv64gcvb: $(OBJS_RV64GCVB) $(OBJS_GPERF_RV64GCVB)| out
# 	$(LD) $(LDFLAGS) $^ -o $@ $(LIBS_GPERF)

out/%_rv64gc.o: %.c | out
	$(CC) $(CFLAGS_RV64GC) $(DEPFLAGS) -c $< -o $@

out/%_rv64gcv.o: %.c | out
	$(CC) $(CFLAGS_RV64GCV) $(DEPFLAGS) -c $< -o $@

out/%_rv64gcb.o: %.c | out
	$(CC) $(CFLAGS_RV64GCB) $(DEPFLAGS) -c $< -o $@

out/%_rv64gcvb.o: %.c | out
	$(CC) $(CFLAGS_RV64GCVB) $(DEPFLAGS) -c $< -o $@

out/%_rv64gc.o: %.S | out
	$(CC) $(CFLAGS_RV64GC) $(DEPFLAGS) -c $< -o $@

out/%_rv64gcv.o: %.S | out
	$(CC) $(CFLAGS_RV64GCV) $(DEPFLAGS) -c $< -o $@

out/%_rv64gcb.o: %.S | out
	$(CC) $(CFLAGS_RV64GCB) $(DEPFLAGS) -c $< -o $@

out/%_rv64gcvb.o: %.S | out
	$(CC) $(CFLAGS_RV64GCVB) $(DEPFLAGS) -c $< -o $@

-include $(wildcard out/*.d)
